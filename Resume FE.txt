>>>>>>>>>>>>>>>>>>>>>>>>> Day 1 <<<<<<<<<<<<<<<<<<<<<<<<<<<<

* Pengenalan WEB Dev
* Pengenanalan HTML, CSS dan JS
* Web development workflow and career
* IDE introduction
- VsCode, Sublime Text, IJ

* node.JS
* npm install
* hacker rank, leet code, freeCodeCamp


>>>>>>>>>>>>>>>>>>>>>>>> Day 2 : <<<<<<<<<<<<<<<<<<<<<<<<<<<<

* Algoritma pemrograman dasar javascript 1
- Algoritma
- flow chart 
- pseudocode
- pengenalan JS 
- instalassi node.JS
- Googling tips

* karakteristik Algoritma
- limited
- unambigous
- has inputs and outputs
- effective

* algoritma - structure basic
- sekuensial, process yang lurus
- seleksi/kondisi, has a junction
- perulangan/looping

* Latihan, Algoritma penjumlahan 2 angka

* flowchart, draws.io 
- flowchart notasi

* Pseudocode, mirip dengan kode tapi ditulis dengan bahasa sederhana tanpa aturan baku dalam penulisan
* Pengenalan javascript
* instalasi node.JS


>>>>>>>>>>>>>>>>>>>>>>>> Day 3 : <<<<<<<<<<<<<<<<<<<<<<<<<<<<

* Algoritma pemrogrmana dasar javascript 2
1. tipe data
- js adalah dynamic typing, tipe data dinamis. 
- tipe data : string, number, boolean, null, undefined, object, function, array.
- null sdh didefenisian tapi tidak ada nilai
- let, var, const.
- string interpolation/backtick
- object terdiri dari key and value
- array bisa mnemapung object
- array bisa bernialai array atau memiliki multidimensi
- pada sebuah function walaupun  bertipe data key consta namun nilai dari key bisa diubah

2. input/output
- npm install readline-sync, tujuan agar bisa menambahkan input/berinteraksi
- npm, paket library, framework dll
- perbedaan package.json dan package-lock.json
- nvm use [version]

3. opertaror angka 
- prefix : --x
- postfix : x++

4. operator logika
- negasi/kebalikan (-)

5. operator komparasis
- equal, not equal, greater than, less than.
- membandingkan value saja : ==
- komparasi value dan tipe data : ===


>>>>>>>>>>>>>>>>>>>>>>>> Day 4 : <<<<<<<<<<<<<<<<<<<<<<<<<<<<
* Algoritma pemrograman dasar javascript 3
* conditional statement
- if,  else, else if
* ternary operator
* equality comparisons
* coercion, diubah/konversi otomatis
* conversion, konversi manual
* truthy and falsy values
- null, undefined,false, nan, 0, ""

* switch statement
- using stritch equals "==="

* loops and iteration
- for, while, do while
- DRY, Don't repeat yourself
- template literal/backtick
- infinity loop

* for of
* for in,object

>>>>>>>>>>>>>>>>>>>>>>>> Day 5 : <<<<<<<<<<<<<<<<<<<<<<<<<<<<
* Algoritma pemrograman dasar javascript 4
1. Basic data structure
- tipe data primitif, tipe data yang hanya bisa menampung 1 jenis tipe data

* array
- index and element
- shallow copy  
- deep copy: Array.from();
- array method

2. understanding array & object
* object, non primitive-values
* key and value
* object constructor & object literal
* deep copy pada oject : Object.Assign({}, object)

>>>>>>>>>>>>>>>>>>>>>>>> live coding : <<<<<<<<<<<<<<<<<<<<<<<<<<<<
* array

>>>>>>>>>>>>>>>>>>>>>>>> Day 6 Algoritma pemrograman dasar 5 : <<<<<<<<<<<<<<<<<<<<<<<<<<<<
1. function
- camalCase
- hoisted
* function scope
* var, global scope
* recursion
* nested function and closure
* predefine function, fungsi bawaan
* function expression
* bilangan fibonacci

2. lodash, library
* library and framework
* npm install lodash
* lodash documentation
- lodash version
- lodash first and last
- lodash chunking
- lodash random 
- lodash shuffle
- lodash times/brp kali
- lodash delay, ada javascript sudah ada async
- lodash range

>>>>>>>>>>>>>>>>>>>>>>>> Day 7 Algoritma pemrograman dasar 6 : <<<<<<<<<<<<<<<<<<<<<<<<<<<<
1. scope variables concept
* global scope
* function scope
* block scope
* module scope
- type module for import export

* var, function scope variable => menjadi scope global


2. spread operator
* menyebarkan data array/object

3. rest opertaror
* destructuring, unpack array/object
* destructuring function

>>>>>>>>>>>>>>>>>>>>>>>> Day 8 Algoritma pemrograman dasar 7 : <<<<<<<<<<<<<<<<<<<<<<<<<<<<
1. OOP 
* class
- constructor
- variabel/properti
- fungsi


* encapsulation
- this. bisa diakses didalam kelas, sedangkan let/const/non-this hanya bisa diakses didalam constructor

* abstraction 
- wajib mengimplementasi methodparent class

* inheritance
- pewarisan 

* polymorphism
- override
- overloading

2. class 


>>>>>>>>>>>>>>>>>>>>>>>> Live coding2 <<<<<<<<<<<<<<<<<<<<<<<<<<<<
* array

>>>>>>>>>>>>>>>>>>>>>>>> Day 9 Algoritma pemrograman dasar 8 : <<<<<<<<<<<<<<<<<<<<<<<<<<<<
1 OOP lanjutan
* assign fungction kedalam variabel
* functional class

* import-export
- menngunakan module, tidak bisa diketik pada browser
- export default diluar curly bracket dan hanya bisa 1 dari 1 file
-  menyederhanakan nama file dengan 'as'


>>>>>>>>>>>>>>>>>>>>>>>> Day 10 Algoritma pemrograman dasar 9 : <<<<<<<<<<<<<<<<<<<<<<<<<<<<
1. bubble sort

2. binary search


>>>>>>>>>>>>>>>>>>>>>>>> Day 11 Coding Test : <<<<<<<<<<<<<<<<<<<<<<<<<<<<

>>>>>>>>>>>>>>>>>>>>>>>> Day 12 HTML1 : <<<<<<<<<<<<<<<<<<<<<<<<<<<<
* hypertwxt markup language
1. pengenalan HTML
2. fungsi HTML
3. struktu sintaks HTML
4. tag, element, attribute
- self closing tag
5. semantic and non-semantic
6. block and inline
7. nested element, suatu element mengandung banyak element
8. Heading : h1 samapai h6
9. text element
10. hyperlink
* internal
* external
* target
- _self
- _blank
- _parent
- _top
11. identitas : Id, class, ...
12. html membandingkan
* image
* video
* audio
* iframe

>>>>>>>>>>>>>>>>>>>>>>>> Day 13 HTML2 : <<<<<<<<<<<<<<<<<<<<<<<<<<<<
1. list
* ordered list
- value : A,A,i,I,1

* unordered list
* description list

2. table
* table, thead, tbody, tr, td, th
* attribute
- border
- cellpadding
- rowspan
- colspan

3. from
* input
* button
* select
* text Area
* attribute
- name, method, action, value, placeholder
* type
- radio, checkbox, text, email, number, 


>>>>>>>>>>>>>>>>>>>>>>>> Day 14 CSS1 : <<<<<<<<<<<<<<<<<<<<<<<<<<<<
* CSS tidak bisa berdiri sendiri
* CSS import
- inline
- internal
- external

1. CSS Syntax
* Selector, property, value

2. CSS selector
* Class, tanda titik
* Id, tanda pagar
* Tag, nama tag
* Attribute, 
- contoh : input[type=text]{}
* Universal, tanda *

3. color
* named color
* hex color
* rgb
* rgba, a = alpha channel for opacity

4. Font
* font-family
- google font :
* font-weight
* font-size
* line height

5. Text Alignment
- justify
- inherit

6. List
* orderedl list
* unordered list
* list-style-type
* list-style-images
* list style position

7. CSS Specificity
* inline
* Id
* class
* Tag
* Universal

>>>>>>>>>>>>>>>>>>>>>>>> Day 15 CSS2 : <<<<<<<<<<<<<<<<<<<<<<<<<<<<
1. Span and div
* span membunkus sepanjang element
* div membungkus 1 baris penuh 

2. border properties
* box model 
* shorthand
-  1 = semua sisi, 2 = atas-bawah, 3 = atas-bawah, kiri, kanan, 4 = kiri-kanan, atas, kanan, bawah atas
* border properties
- border width
- border style
- border color
- border radius

3. width and height

4. layout
* float : left, right
* position : static, fixed, sticky, relative, absolute
* Display: 
- inline
- block
- inline-block
- grid
- none, hidden 
- flex : flex-direction, flex column, etc


>>>>>>>>>>>>>>>>>>>>>>>> Day 16 Career Preparation : <<<<<<<<<<<<<<<<<<<<<<<<<<<<
* CV ATS 
* CV Creative

>>>>>>>>>>>>>>>>>>>>>>>> Day 17 Bootstrap 1 : <<<<<<<<<<<<<<<<<<<<<<<<<<<<
* framework front-end agar lebih rresponsive
* rwd, responsive web-developer
1. introduction Bootstrap
* pre-made html/CSS
* javascript-widgets
* mobile first, resonsive layout
* not support IE 10/11
* how to install, use cdn : cloud delivery network
- create new index.html and and meta = "viewport"
- add link and script 
1. buka website bootstrap
2. copas file html, css, js dan popovers, unutk menggunakan utility dropdown, select dll


2. viewport
* area di komputer diabawah navbar unutk melihat ukuran layar device 
<meta name = "viewport" content="width=device-width, initial-scale=1">

3. frontend layout
* breakpoints, block of responsive design (standar ukuran device)
- use media query
* grid system
- container, rows, columns
- container-{breakpoints}, ex : .container-xl


4. container and grid
* gutter, spacing antar kolom
* order, merubah posisi
* offset, membuat kolom kosong

5. images
* img-fluid
* img-thumbnail, ada border
* align images
* float, mx-auto

6. media query
* media query at css : @media
* min-width
* max-width
* sungle and between breakpoints 
- @media (min-width : 576px) and (max-width: 991.98px){...}


>>>>>>>>>>>>>>>>>>>>>>>> Day 18 Bootstrap 2 : <<<<<<<<<<<<<<<<<<<<<<<<<<<<
1. Bootstrap installation
2. buttons
* single button
* button group
* button outline : btn-outline-primary
* button size : btn-sm ...
* custom btn :  --bs-btn-color : white;

3. icons
* cara install
1. dengan cdn
- copy cdn
- dengan svg

2. download dan include di folder
3.dengan npm atau yarn

4. Forms
* from control
- fieldset, legend

* check & radios
- form-check-input
- switch : form-switch, role="switch"

* Input group
- input-group-text
- floating labels, label yg bergerak
- kurung input kedalam .form-floating

* select
* range
* layout
* validation, cek kesalahan email contohnya

5. Introduction to figma, collaborate interface
* slicing figma
- mengkonversi frame figma menjadi website real 
- https://www.figma.com/file/lzK0wgWbha9OI4UIJRIx6C/Responsive-Web-Design-with-Bootstrap-(Dibimbing)?type=design&node-id=1033%3A453325&t=EA1MBf6HIuVpEs4K-1

6. Navbar
* navar-expands
* navbar-light, dark
* navbar-brand
* navbar toggler
- data-bs-target
- data-bs-toggler
- aria-controls
- aria-expanded
- arial-label

* dropdown


>>>>>>>>>>>>>>>>>>>>>>>> Day 19 Bootstrap 3 : <<<<<<<<<<<<<<<<<<<<<<<<<<<<

1. Alert
* feedback message 
* type : 
- alertprimary, secondary, dll
* alert dismissible
* aria untuk tuna-netra

2. Breadcrumbs
* indikasi user sedang dipage mana, atau utk hierarki navigasi
* separator : /, >, dll

3. Card
* dibagi 3 section
- card headers, 
- body 
- footers
* card-img-overlay
* w-75
* text-bg-dark


4. Carousel
* fitur utk banner yg bisa move img/silde
* data-bs-ride="carousel;
* carousel-controls-prev
* "carousel-controls-prev-icon
* carousel-indicators
* data-bs-slides-to"0";
* carousel-fade, efek animasi

5. Modal
* page yang muncul setelah menyelesaikan suatu instruksi
* bagian modal;
- modal title, body, footers
- modal fade
- modal-dialogs
- modal-content
- data-bs-backdrop="static"
- data-bs-keyboard="false"
- modal-dialog-centered

* modal size
- modal-dialog modal-xl

6. Overview mini project

>>>>>>>>>>>>>>>>>>>>>>>> Day 20 Portfolio and business understanding class : <<<<<<<<<<<<<<<<<<<<<<<<<<<<
* linkedin profile
* github/gitlab
* personal website
* blog (web-related)
* projects
* contribute to open source project
* business understanding
- waterfall, sequencial
- agile, for  develope project

* VCS : Version control sysem
* GIT adalah salah satu VCS

>>>>>>>>>>>>>>>>>>>>>>>> Day 21 GIT <<<<<<<<<<<<<<<<<<<<<<<<<<<<
* intruksi pada git
- git add .
- git commit -m "message"
- git remote add origin (url)
- git pull 
- git push origin (branch)
- git config --global user.name "username"
- git config --global user.email "email"
- git clone (url)
- git reset : hard reset dan soft reset
- git reset --hard (id commit)
- git reset --hard HEAD~1
- git reset --hard HEAD~n, kembali n langkah
- git reset --soft, back to stage area

* git tagging, menandai version : git tag -a [tagname] -m "[message]"
- git push origin [versi]
- git origin tags

* git ignore, mengecualikan file 
* git branch
- git branc -a, melihat semua branch
- git checkout (nama branch)
- git checkout -b (nama branch), checkout ke branch yg baru dibuat
- merging branch
- pull request
* fork

>>>>>>>>>>>>>>>>>>>>>>>> Day 22 Pramid terms sharing session <<<<<<<<<<<<<<<<<<<<<<<<<<<<

>>>>>>>>>>>>>>>>>>>>>>>> Day 23 Mid term test <<<<<<<<<<<<<<<<<<<<<<<<<<<<

>>>>>>>>>>>>>>>>>>>>>>>> Day 24 Mini Project Mentoring : HTML, CSS, dan Bootstrap <<<<<<<<<<<<<<<<<<<<<<<<<<<<

>>>>>>>>>>>>>>>>>>>>>>>> Day 25 Javascript <<<<<<<<<<<<<<<<<<<<<<<<<<<<
1. DOM tree
- representasi element html yang terdiri dari node
- root addalah simpul paling luar
- node memiliki banyak tipe yaitu, element, attribute, teks dan lain2
* nodelist, dapat berisi node apapun
* html collection, harus berisi elemnt html
* html collection bersifat live sedangan html collection tidak
* struktur hierarki
- root node
- parent node, 1 tingkat diatas dari child
- grand parent node,  2 tingkat diatas 
- child node
- sibling, child node yang memilii parent yang samapai
- descandent, turunan

2. DOM Selection
* getElementById() : menghasilka elemnt
* getElementsByTagName() : html collection
* getElementByClassName() : html collection
* querySelector() : element
* querySelectorAll() : node list
* dari sisi performance getElementById dan getElementsByTagName adalah yang paling cepat

* mengubah node root
- mempersempit scope

3 DOM Manipulation :
* manipulasi element
- element.innerHTML
- element.style.<property>
- element.setAttribute()
+ element.getAttribute()
+ element.removeAttribute()

- element.classList, 
+ element.classList.add(),
+ element.classList.remove(),
+ element.classList.toggle(), jika eelement tidak memiliki class maka ditambahkan jika sudah maka diremove
+ element.classList.item(), mengetahui class tertentu
+ element.classList.contains(), cek kelas tertentu
+ element.classList.replace(), 

- ... dll

* manipulasi node
- document.createElement();
- document.createTextNode();
- node.appendChild();
- node.insertBefore();
- parentNode.removeChild();
- parentNode.replaceChild();

* method baru
- parentNode.appendChild
- parenrMode.prependChild
- childNode.before
- childNode.after
- childNode.remove
- childNode.replaceWith()

* Event
* merepresentasikan kejadian yang didalam DOM, bisa dilalkukan user atapun oleh appendChild
* ada beberapa cara unutk  merepakan Event
1. event handler
- on<event>,
- inline HTML attribute
- element method
2. addEventListener. memiliki 2 parameter

* event, menimpa/mengabaikan event sebelumnya
* add.EventListener, menmbahkan intruksi sebelumnya

* Event List
- click
- dblclick
- mouseenter

* bermain dengan warna

* game suwit jawa
- setInterval
- clearInterval
- setTimeout
- new Date().Time()

* DOM Traversal/penelusuran DOM
* tujuan ditelusuri
* DOM traversal Method
1. parentNode
2. parentElement
3. nextSibling
4. nextElementSibling
5. previousSibling
6. previousElementSibling

* prevent default
* event.preventDefault();
- unutk mneghentikan aksi default sebuah element

* Event Bubbling, mencegah efek bubbling pada elemnt yang memiliki berbeda aksi
- e.stopPropagation();
- e.target.parentElement

* tahapan belajar javascript

>>>>>>>>>>>>>>>>>>>>>>>> Day 26 React1 <<<<<<<<<<<<<<<<<<<<<<<<<<<<
* the library for web and native user interface
1. introduction to react JS
2. Setup React JS
3. Functional Components
4. Styling React
* react bisa ditambahkan pada kode php
* prinsip react
1. declarative
2. komponen base
3. lowa, learn one write anywhere (react native)

* virtual DOM , create layer
* Setup react 
- ada 2 cara yaitu dengan meta frame work : next, gatsby, remix atau dengan polosan seperti vite
- vite, module bundler
1. install npm/yarn/pnpm
- npm create vite@latest

* functional Component

* Styling React
- integrasi dengan module css
- inline Styling
- react bootstrap : 
. npm install react-bootstrap bootstrap
. import : import 'bootstrap/dist/css/bootstrap.min.css';

* cara styling lain css : 
1. material UI
2. Chakra UI
3. tailwind css

>>>>>>>>>>>>>>>>>>>>>>>> Day 27 React2 <<<<<<<<<<<<<<<<<<<<<<<<<<<<

1. Review virtual DOM rendering
2. React state 
* reactive value, dengan useState : [counter, setCounter] = useState(0);
* control input
* hide and show value dengan boolean

3. Parent and child communication
* dengan props
* mengganti value dari parent
* passing value parent -> child

>>>>>>>>>>>>>>>>>>>>>>>> Day 28 React3 <<<<<<<<<<<<<<<<<<<<<<<<<<<<
* pengulangan materi
1. review functional component, fungsi yang bisa mereturn html 
2. rendering variable and function
3. Ternary Conditional Operator dan Short-Circuit Conditional Expression
4. render array
5. render obejct, tidak bisa bisanya dengan cara akses object apa yang dirender
6. merender object secara iteratif
- Object.keys(nama variabel).map();
7. event handling react

>>>>>>>>>>>>>>>>>>>>>>>> Day 29 React4 <<<<<<<<<<<<<<<<<<<<<<<<<<<<
1. review event handling
2. React State
- variabel dengan value yg berubah2 (reactive variabel)
- variabel biasa tidak akan menampilkan perubahan pada UI
- import useState

3. Parent and child communiacation, sejauh ini tidak bisa mempassing value dari child ke parent
- props adalah sebua object

4. useEffect
- sideEffect, value dari yang berubah dari variabel dan intruksi yang sama
- jika kita ingin melakukan sesuatu yg inkonsisten maka gunakan useEffect
- localSorage.setItem("tulisan",tulisan)
- localSorage.getItem("tulisan), mengambil data yang disimpan pada localstorage dengan key = "tulisan"


5. Bagaimana front end dan back end berkomunikasi

>>>>>>>>>>>>>>>>>>>>>>>> Day 30 React5 <<<<<<<<<<<<<<<<<<<<<<<<<<<<
1. useEffect
* side effect on Components
- dependency
- jika tidak ada dependency maka useEffect akan langsung dijalankan

* useEffect with cleanup function

2. bagaimana front end dan backend berkomunikasi
* API ibarat waitres
* fetching data
- jsonpalceholder
- {JSON.stringify(data)}
- async function, await, try and catch


>>>>>>>>>>>>>>>>>>>>>>>> Day 31 React6 <<<<<<<<<<<<<<<<<<<<<<<<<<<<
1. pengulangan API
2. useEffect tidak bisa memanggil fungsi async, buat fungsi baru didalam useEffect unutk memanggil fungsi async
3. CRUD (Create, Read, Update, Post)
* Read, Method : 'GET'
- headers, apiKey

* Create, method : 'POST'
- headers, Authorization, Content-Type, body (argumen/parametersyg dikirim ke backend)

* Update, method: 'POST'
- id

* delete, methot : 'DELETE

>>>>>>>>>>>>>>>>>>>>>>>> Day 32 React7 <<<<<<<<<<<<<<<<<<<<<<<<<<<<
* React context
- useContext, mentransfer/pertukaran data antar file dengan global state management unutk menghindari definiprops berulang pada aplikasi yg kompleks
- createContext(); / kantong
- provider / ruang (komponen yang bisa mengakses kantong)

* alur
1. userkonteks /nama bebas = createContext({}),
2. function provider({childers}) / nama bebas
3. userKonteks.Provider value={{}} / didalam function provider

* react routing
- simple routing, complex routing
- Browser Routes, komponen dasar untuk menyimpan history
- Routes, komponen redirection sesuai path
- Router, path, element

* flow
install react=router react-router-dom

* dynamic routing
- useParams

* nested routing, 
* navigate halaman
- <Link>
- useNavigate()
- clickBack, clickTo 







